/**
 * Задание № 1
 *  Напишите функцию pow(x,n), которая возвращает x в степени n.
 *  Иначе говоря, умножает x на себя n раз и возвращает результат.
 *
 *   pow(3, 2) = 3 * 3 = 9
 *   pow(3, 3) = 3 * 3 * 3 = 27
 *   pow(1, 100) = 1 * 1 * ...*1 = 1
 *   Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).
 **/



/**
 * Задание № 2
 *  Факториа́л числа – это число, умноженное на «себя минус один»,
 *  затем на «себя минус два» и так далее, до единицы. Обозначается n!
 *
 *  Определение факториала можно записать как:
 *    n! = n * (n - 1) * (n - 2) * ...*1
 *
 *  Примеры значений для разных n:
 *
 *    1! = 1
 *    2! = 2 * 1 = 2
 *    3! = 3 * 2 * 1 = 6
 *    4! = 4 * 3 * 2 * 1 = 24
 *    5! = 5 * 4 * 3 * 2 * 1 = 120
 *
 *  Задача – написать функцию factorial(n), которая возвращает факториал числа n!,
 *  используя рекурсивный вызов.
 **/

/**
 * Задание № 3
 * 1. Если номер месяца месяц делится без остатка на 4, то находи 75% популяции овец.
 *      Логируем это значение в консоль в формате, указанном ниже.
 *      Затем отнимает это значение от общего кол-ва овец.
 *
 * 2. В противном случае, если популяции больше 10000, найти половину от популяции овец.
 *      Логируем это значение в консоль в формате, указанном ниже.
 *      Затем отнимаем это значение из общего числа овец.
 *
 * Используемый формат сообщения после уменьшения числа популяции овец:
 * --------------------------------------------
 * Отнимаем <число> овец от их популяции.
 * --------------------------------------------
 *
 * 3. Также каждый месяц популяции увеличивается на 4.
 *      Логируем в консоль значение популяции овец, полученное после увеличения.
 *
 * Формат сообщения после увеличения популяции овец
 * --------------------------------------------
 * Будет <число> овец после 1 месяца(ев)
 * --------------------------------------------
 *
 * Для решения использовать использовать циклы
 */
var numSheep = 4;
var monthsToPrint = 12;